/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StateSvr_H
#define StateSvr_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "StateSvr_types.h"

namespace protruly {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StateSvrIf {
 public:
  virtual ~StateSvrIf() {}
  virtual void login(LoginResult& _return, const ST_SvrInfo& info, const std::string& strParam) = 0;
  virtual void logout(const ST_UserInfo& info) = 0;
  virtual void handleRequest(ST_MsgResult& _return, const int32_t msgId, const std::string& jsParam) = 0;
};

class StateSvrIfFactory {
 public:
  typedef StateSvrIf Handler;

  virtual ~StateSvrIfFactory() {}

  virtual StateSvrIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StateSvrIf* /* handler */) = 0;
};

class StateSvrIfSingletonFactory : virtual public StateSvrIfFactory {
 public:
  StateSvrIfSingletonFactory(const boost::shared_ptr<StateSvrIf>& iface) : iface_(iface) {}
  virtual ~StateSvrIfSingletonFactory() {}

  virtual StateSvrIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StateSvrIf* /* handler */) {}

 protected:
  boost::shared_ptr<StateSvrIf> iface_;
};

class StateSvrNull : virtual public StateSvrIf {
 public:
  virtual ~StateSvrNull() {}
  void login(LoginResult& /* _return */, const ST_SvrInfo& /* info */, const std::string& /* strParam */) {
    return;
  }
  void logout(const ST_UserInfo& /* info */) {
    return;
  }
  void handleRequest(ST_MsgResult& /* _return */, const int32_t /* msgId */, const std::string& /* jsParam */) {
    return;
  }
};

typedef struct _StateSvr_login_args__isset {
  _StateSvr_login_args__isset() : info(false), strParam(false) {}
  bool info :1;
  bool strParam :1;
} _StateSvr_login_args__isset;

class StateSvr_login_args {
 public:

  StateSvr_login_args(const StateSvr_login_args&);
  StateSvr_login_args& operator=(const StateSvr_login_args&);
  StateSvr_login_args() : strParam() {
  }

  virtual ~StateSvr_login_args() throw();
  ST_SvrInfo info;
  std::string strParam;

  _StateSvr_login_args__isset __isset;

  void __set_info(const ST_SvrInfo& val);

  void __set_strParam(const std::string& val);

  bool operator == (const StateSvr_login_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    if (!(strParam == rhs.strParam))
      return false;
    return true;
  }
  bool operator != (const StateSvr_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateSvr_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StateSvr_login_pargs {
 public:


  virtual ~StateSvr_login_pargs() throw();
  const ST_SvrInfo* info;
  const std::string* strParam;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StateSvr_login_result__isset {
  _StateSvr_login_result__isset() : success(false) {}
  bool success :1;
} _StateSvr_login_result__isset;

class StateSvr_login_result {
 public:

  StateSvr_login_result(const StateSvr_login_result&);
  StateSvr_login_result& operator=(const StateSvr_login_result&);
  StateSvr_login_result() {
  }

  virtual ~StateSvr_login_result() throw();
  LoginResult success;

  _StateSvr_login_result__isset __isset;

  void __set_success(const LoginResult& val);

  bool operator == (const StateSvr_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StateSvr_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateSvr_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StateSvr_login_presult__isset {
  _StateSvr_login_presult__isset() : success(false) {}
  bool success :1;
} _StateSvr_login_presult__isset;

class StateSvr_login_presult {
 public:


  virtual ~StateSvr_login_presult() throw();
  LoginResult* success;

  _StateSvr_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StateSvr_logout_args__isset {
  _StateSvr_logout_args__isset() : info(false) {}
  bool info :1;
} _StateSvr_logout_args__isset;

class StateSvr_logout_args {
 public:

  StateSvr_logout_args(const StateSvr_logout_args&);
  StateSvr_logout_args& operator=(const StateSvr_logout_args&);
  StateSvr_logout_args() {
  }

  virtual ~StateSvr_logout_args() throw();
  ST_UserInfo info;

  _StateSvr_logout_args__isset __isset;

  void __set_info(const ST_UserInfo& val);

  bool operator == (const StateSvr_logout_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const StateSvr_logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateSvr_logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StateSvr_logout_pargs {
 public:


  virtual ~StateSvr_logout_pargs() throw();
  const ST_UserInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StateSvr_handleRequest_args__isset {
  _StateSvr_handleRequest_args__isset() : msgId(false), jsParam(false) {}
  bool msgId :1;
  bool jsParam :1;
} _StateSvr_handleRequest_args__isset;

class StateSvr_handleRequest_args {
 public:

  StateSvr_handleRequest_args(const StateSvr_handleRequest_args&);
  StateSvr_handleRequest_args& operator=(const StateSvr_handleRequest_args&);
  StateSvr_handleRequest_args() : msgId(0), jsParam() {
  }

  virtual ~StateSvr_handleRequest_args() throw();
  int32_t msgId;
  std::string jsParam;

  _StateSvr_handleRequest_args__isset __isset;

  void __set_msgId(const int32_t val);

  void __set_jsParam(const std::string& val);

  bool operator == (const StateSvr_handleRequest_args & rhs) const
  {
    if (!(msgId == rhs.msgId))
      return false;
    if (!(jsParam == rhs.jsParam))
      return false;
    return true;
  }
  bool operator != (const StateSvr_handleRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateSvr_handleRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StateSvr_handleRequest_pargs {
 public:


  virtual ~StateSvr_handleRequest_pargs() throw();
  const int32_t* msgId;
  const std::string* jsParam;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StateSvr_handleRequest_result__isset {
  _StateSvr_handleRequest_result__isset() : success(false) {}
  bool success :1;
} _StateSvr_handleRequest_result__isset;

class StateSvr_handleRequest_result {
 public:

  StateSvr_handleRequest_result(const StateSvr_handleRequest_result&);
  StateSvr_handleRequest_result& operator=(const StateSvr_handleRequest_result&);
  StateSvr_handleRequest_result() {
  }

  virtual ~StateSvr_handleRequest_result() throw();
  ST_MsgResult success;

  _StateSvr_handleRequest_result__isset __isset;

  void __set_success(const ST_MsgResult& val);

  bool operator == (const StateSvr_handleRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StateSvr_handleRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateSvr_handleRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StateSvr_handleRequest_presult__isset {
  _StateSvr_handleRequest_presult__isset() : success(false) {}
  bool success :1;
} _StateSvr_handleRequest_presult__isset;

class StateSvr_handleRequest_presult {
 public:


  virtual ~StateSvr_handleRequest_presult() throw();
  ST_MsgResult* success;

  _StateSvr_handleRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StateSvrClient : virtual public StateSvrIf {
 public:
  StateSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StateSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(LoginResult& _return, const ST_SvrInfo& info, const std::string& strParam);
  void send_login(const ST_SvrInfo& info, const std::string& strParam);
  void recv_login(LoginResult& _return);
  void logout(const ST_UserInfo& info);
  void send_logout(const ST_UserInfo& info);
  void handleRequest(ST_MsgResult& _return, const int32_t msgId, const std::string& jsParam);
  void send_handleRequest(const int32_t msgId, const std::string& jsParam);
  void recv_handleRequest(ST_MsgResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StateSvrProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<StateSvrIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StateSvrProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handleRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StateSvrProcessor(boost::shared_ptr<StateSvrIf> iface) :
    iface_(iface) {
    processMap_["login"] = &StateSvrProcessor::process_login;
    processMap_["logout"] = &StateSvrProcessor::process_logout;
    processMap_["handleRequest"] = &StateSvrProcessor::process_handleRequest;
  }

  virtual ~StateSvrProcessor() {}
};

class StateSvrProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StateSvrProcessorFactory(const ::boost::shared_ptr< StateSvrIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< StateSvrIfFactory > handlerFactory_;
};

class StateSvrMultiface : virtual public StateSvrIf {
 public:
  StateSvrMultiface(std::vector<boost::shared_ptr<StateSvrIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StateSvrMultiface() {}
 protected:
  std::vector<boost::shared_ptr<StateSvrIf> > ifaces_;
  StateSvrMultiface() {}
  void add(boost::shared_ptr<StateSvrIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void login(LoginResult& _return, const ST_SvrInfo& info, const std::string& strParam) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login(_return, info, strParam);
    }
    ifaces_[i]->login(_return, info, strParam);
    return;
  }

  void logout(const ST_UserInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logout(info);
    }
    ifaces_[i]->logout(info);
  }

  void handleRequest(ST_MsgResult& _return, const int32_t msgId, const std::string& jsParam) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->handleRequest(_return, msgId, jsParam);
    }
    ifaces_[i]->handleRequest(_return, msgId, jsParam);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StateSvrConcurrentClient : virtual public StateSvrIf {
 public:
  StateSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StateSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(LoginResult& _return, const ST_SvrInfo& info, const std::string& strParam);
  int32_t send_login(const ST_SvrInfo& info, const std::string& strParam);
  void recv_login(LoginResult& _return, const int32_t seqid);
  void logout(const ST_UserInfo& info);
  void send_logout(const ST_UserInfo& info);
  void handleRequest(ST_MsgResult& _return, const int32_t msgId, const std::string& jsParam);
  int32_t send_handleRequest(const int32_t msgId, const std::string& jsParam);
  void recv_handleRequest(ST_MsgResult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
