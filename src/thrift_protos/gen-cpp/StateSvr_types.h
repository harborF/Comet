/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StateSvr_TYPES_H
#define StateSvr_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace protruly {

class ST_SvrInfo;

class ST_UserInfo;

class LoginResult;

class ST_MsgResult;


class ST_SvrInfo : public virtual ::apache::thrift::TBase {
 public:

  ST_SvrInfo(const ST_SvrInfo&);
  ST_SvrInfo& operator=(const ST_SvrInfo&);
  ST_SvrInfo() : strSvrHost(), uiThreadIdx(0) {
  }

  virtual ~ST_SvrInfo() throw();
  std::string strSvrHost;
  int32_t uiThreadIdx;

  void __set_strSvrHost(const std::string& val);

  void __set_uiThreadIdx(const int32_t val);

  bool operator == (const ST_SvrInfo & rhs) const
  {
    if (!(strSvrHost == rhs.strSvrHost))
      return false;
    if (!(uiThreadIdx == rhs.uiThreadIdx))
      return false;
    return true;
  }
  bool operator != (const ST_SvrInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ST_SvrInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ST_SvrInfo &a, ST_SvrInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ST_SvrInfo& obj)
{
  obj.printTo(out);
  return out;
}


class ST_UserInfo : public virtual ::apache::thrift::TBase {
 public:

  ST_UserInfo(const ST_UserInfo&);
  ST_UserInfo& operator=(const ST_UserInfo&);
  ST_UserInfo() : member_id(0), channel(0), type(0), session() {
  }

  virtual ~ST_UserInfo() throw();
  int32_t member_id;
  int32_t channel;
  int32_t type;
  std::string session;

  void __set_member_id(const int32_t val);

  void __set_channel(const int32_t val);

  void __set_type(const int32_t val);

  void __set_session(const std::string& val);

  bool operator == (const ST_UserInfo & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    if (!(channel == rhs.channel))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const ST_UserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ST_UserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ST_UserInfo &a, ST_UserInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ST_UserInfo& obj)
{
  obj.printTo(out);
  return out;
}


class LoginResult : public virtual ::apache::thrift::TBase {
 public:

  LoginResult(const LoginResult&);
  LoginResult& operator=(const LoginResult&);
  LoginResult() : retCode(-1) {
  }

  virtual ~LoginResult() throw();
  int32_t retCode;
  ST_UserInfo info;

  void __set_retCode(const int32_t val);

  void __set_info(const ST_UserInfo& val);

  bool operator == (const LoginResult & rhs) const
  {
    if (!(retCode == rhs.retCode))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const LoginResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LoginResult &a, LoginResult &b);

inline std::ostream& operator<<(std::ostream& out, const LoginResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ST_MsgResult__isset {
  _ST_MsgResult__isset() : jsData(false) {}
  bool jsData :1;
} _ST_MsgResult__isset;

class ST_MsgResult : public virtual ::apache::thrift::TBase {
 public:

  ST_MsgResult(const ST_MsgResult&);
  ST_MsgResult& operator=(const ST_MsgResult&);
  ST_MsgResult() : retCode(-1), jsData() {
  }

  virtual ~ST_MsgResult() throw();
  int32_t retCode;
  std::string jsData;

  _ST_MsgResult__isset __isset;

  void __set_retCode(const int32_t val);

  void __set_jsData(const std::string& val);

  bool operator == (const ST_MsgResult & rhs) const
  {
    if (!(retCode == rhs.retCode))
      return false;
    if (__isset.jsData != rhs.__isset.jsData)
      return false;
    else if (__isset.jsData && !(jsData == rhs.jsData))
      return false;
    return true;
  }
  bool operator != (const ST_MsgResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ST_MsgResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ST_MsgResult &a, ST_MsgResult &b);

inline std::ostream& operator<<(std::ostream& out, const ST_MsgResult& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
